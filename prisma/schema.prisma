generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(cuid())
  name              String?
  email             String               @unique
  password          String?
  role              Role                 @default(STUDENT)
  bio               String?
  verificationToken String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  agreedToTerms     Boolean              @default(false)
  deletedAt         DateTime?
  lastLogin         DateTime?
  emailVerified     DateTime?
  image             String?
  certificates      Certificate[]
  comments          Comment[]
  courses           Course[]             @relation("InstructorCourses")
  discussions       Discussion[]
  enrollments       Enrollment[]
  resetTokens       PasswordResetToken[]
  progress          Progress[]
  quizAttempts      QuizAttempt[]

  orders            Order[]

  @@map("users")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "password_reset_tokens_userId_fkey")
  @@map("password_reset_tokens")
}

model Course {
  id           String        @id @default(cuid())
  title        String
  description  String
  price        Float         @default(0)
  level        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  instructorId String
  tags         String?
  thumbnail    String?
  certificates Certificate[]
  instructor   User          @relation("InstructorCourses", fields: [instructorId], references: [id])
  discussions  Discussion[]
  enrollments  Enrollment[]
  modules      Module[]
  quizzes      Quiz[]

  orders       Order[]

  @@index([instructorId], map: "courses_instructorId_fkey")
  @@map("courses")
}

model Module {
  id       String   @id @default(cuid())
  title    String
  courseId String
  lessons  Lesson[]
  course   Course   @relation(fields: [courseId], references: [id])

  @@index([courseId], map: "modules_courseId_fkey")
  @@map("modules")
}

model Lesson {
  id        String     @id @default(cuid())
  title     String
  content   String
  videoUrl  String?
  createdAt DateTime   @default(now())
  moduleId  String
  module    Module     @relation(fields: [moduleId], references: [id])
  progress  Progress[]

  @@index([moduleId], map: "lessons_moduleId_fkey")
  @@map("lessons")
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId], map: "enrollments_courseId_fkey")
  @@map("enrollments")
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@index([lessonId], map: "progress_lessonId_fkey")
  @@map("progress")
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  courseId     String
  questions    Question[]
  attempts     QuizAttempt[]
  course       Course        @relation(fields: [courseId], references: [id])
  examSessions ExamSession[]

  @@index([courseId], map: "quizzes_courseId_fkey")
  @@map("quizzes")
}

model Question {
  id       String  @id @default(cuid())
  quizId   String
  question String
  options  String?
  answer   String
  quiz     Quiz    @relation(fields: [quizId], references: [id])

  @@index([quizId], map: "questions_quizId_fkey")
  @@map("questions")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Int
  userId      String
  quizId      String
  attemptedAt DateTime @default(now())
  passed      Boolean  @default(false)
  prize       String?
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, quizId])
  @@index([quizId], map: "quiz_attempts_quizId_fkey")
  @@map("quiz_attempts")
}

model Certificate {
  id       String   @id @default(cuid())
  issuedAt DateTime @default(now())
  userId   String
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([courseId], map: "certificates_courseId_fkey")
  @@index([userId], map: "certificates_userId_fkey")
  @@map("certificates")
}

model Discussion {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  userId    String
  courseId  String
  comments  Comment[]
  course    Course    @relation(fields: [courseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([courseId], map: "discussions_courseId_fkey")
  @@index([userId], map: "discussions_userId_fkey")
  @@map("discussions")
}

model Comment {
  id           String     @id @default(cuid())
  discussionId String
  userId       String
  content      String
  createdAt    DateTime   @default(now())
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([discussionId], map: "comments_discussionId_fkey")
  @@index([userId], map: "comments_userId_fkey")
  @@map("comments")
}

model ExamSession {
  sessionId  String      @id @default(cuid())
  fullName   String
  email      String
  phone      String
  college    String?
  quizId     String
  createdAt  DateTime    @default(now())
  examResults ExamResult[]

  quiz Quiz @relation(fields: [quizId], references: [id])

  @@map("exam_sessions")
}

model ExamResult {
  id            String      @id @default(cuid())
  score         Int
  timeTaken     Int
  passed        Boolean     @default(false)
  examSessionId String
  examSession   ExamSession @relation(fields: [examSessionId], references: [sessionId])

  @@map("exam_results")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  courseId      String
  paymentMethod String
  amount        Float
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId], map: "orders_userId_fkey")
  @@index([courseId], map: "orders_courseId_fkey")
  @@map("orders")
}
